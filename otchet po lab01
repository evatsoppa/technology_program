Отчет о выполнении лабораторной работы #1

Цель работы: Создать программу на C++, содержащую описание структуры данных, реализующей список, а также функции для манипуляции данными в этом списке.

Алгоритм и структура программы:

1. Структура данных:
    - Node представляет узел списка с полями типа string (name), int (age), double (salary), и указателем на следующий узел (`next`).

    - LinkedList представляет собой класс, содержащий указатель на начало списка (`head`). Он включает в себя методы для добавления элементов в начало, конец и после заданного элемента, удаления элемента по имени, а также отображения содержания списка на экран.

2. Добавление элемента в начало списка (`addToBeginning`):
    - Создается новый узел (`newNode`) с переданными значениями.
    - Устанавливается указатель next нового узла на текущий head.
    - head обновляется, указывая на новый узел.

3. Добавление элемента в конец списка (`addToEnd`):
    - Если список пуст, создается новый узел и он становится head.
    - В противном случае, находится последний узел в списке, и его указатель next обновляется, чтобы указывать на новый узел.

4. Добавление элемента после заданного элемента (`addAfter`):
    - Поиск узла с именем, совпадающим с целевым.
    - Если узел найден, создается новый узел и вставляется после целевого.

5. Удаление элемента из списка (`remove`):
    - Если удаляемый элемент находится в начале, head обновляется, чтобы указывать на следующий узел.
    - В противном случае, находится узел перед удаляемым, и его указатель next обновляется, чтобы пропустить удаляемый узел.

6. Вывод содержания списка на экран (`displayList`):
    - Проход по списку от начала до конца и вывод данных каждого узла на экран.

*Пример использования: int main() {
    LinkedList myList;

    myList.addToBeginning("John", 25, 50000.0);
    myList.addToEnd("Alice", 30, 60000.0);
    myList.addAfter("John", "Bob", 28, 55000.0);
    myList.displayList();

    myList.remove("Alice");
    myList.displayList();

    return 0;
}
