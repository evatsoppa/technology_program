Отчет о выполнении программы №2
### Структура программы:
1. Класс vect:
    - Поля:
        - int dim - размерность вектора,
        - double* b - массив элементов вектора,
        - int num - номер объекта,
        - static int count - счетчик созданных объектов.
    - Методы:
        - vect(int dimension, double* array) - конструктор для создания вектора,
        - ~vect() - деструктор для уничтожения вектора,
        - Перегруженные операторы векторной алгебры (`+`, -, унарный -, скалярное произведение *, умножение на скаляр *, присваивание `=`).
2. Класс matr:
    - Поля:
        - int dim - размерность матрицы,
        - double* a - массив элементов матрицы,
        - int num - номер объекта,
        - static int count - счетчик созданных объектов.
    - Методы:
        - matr(int dimension, double* array) - конструктор для создания матрицы,
        - ~matr() - деструктор для уничтожения матрицы,
        - Перегруженные операторы векторной алгебры для матрицы (`+`, -, унарный -, поэлементное произведение *, умножение на скаляр *, присваивание `=`),
        - Оператор умножения матрицы на вектор.
3. Функция main:
    - Создание векторов и матриц.
    - Выполнение операций векторной алгебры.
    - Освобождение памяти.

### Шаги выполнения программы:

1. Создание векторов и матриц:
    - Создаются два вектора vector1 и vector2 размерности 3 с элементами {1.0, 2.0, 3.0} и {4.0, 5.0, 6.0} соответственно.
    - Создаются две матрицы matrix1 и matrix2 размерности 3 с элементами {1.0, 2.0, 3.0} и {7.0, 8.0, 9.0} соответственно.

2. Операции векторной алгебры:
    - Выполняются операции над векторами и матрицами, такие как сложение, вычитание, умножение на скаляр, скалярное произведение, присваивание и др.
    - Каждая операция сопровождается выводом сообщения о создании и уничтожении объектов.

3. Освобождение памяти:
    - Выделенная память для результатов операций освобождается.
